<?php
/**
 * Log2Log Online Chat Log Converter
 *  Execution
 *   Converter Frontend
 * 
 * License:
 *  This file is part of Log2Log.
 *  
 *  Log2Log is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  
 *  Log2Log is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *  
 *  You should have received a copy of the GNU General Public License
 *  along with Log2Log.  If not, see <http://www.gnu.org/licenses/>.
 * 
 */

include ("core.php");
$core = new Core();

// Build Initial Conversion Menu
$FORMATS = $core->formats;
asort($FORMATS);
/*$content = "<table class=\"fromchart\">
 <thead class=\"fromcharthead\">
  <th>Service</th>
  <th>Special Instructions</th>
 </thead>
 <tbody class=\"fromchartbody\">
";
foreach ($FORMATS as $name => $format)
  {
  $instructions_special = $format['instructions'];
  $content .= "  <tr id=\"row-$name\" onmouseover=\"highlight(this.id);\" onmouseout=\"unhighlight(this.id);\" onclick=\"document.location='?convertfrom=$name'\">\n   <td><center>";
  if ($format['image'])
    $content .= "<a href=\"?convertfrom=$name\"><img src=\"".$format['image']."\" alt=\"[".strtoupper($name)." ICON]\" /></a><br />";
  $content .= "<a href=\"?convertfrom=$name\">$name</a></center></td>\n   <td>$instructions_special</td>\n  </tr>\n";
  }
$content .= " </tbody>
</table>\n";*/
$content = "<table class=\"fromchart\">
 <thead class=\"fromcharthead\">
  <th colspan=\"2\">From Service</th>
 </thead>
 <tbody class=\"fromchartbody\">
";
foreach ($FORMATS as $name_unix => $format)
  {
  if ($format['from'] == true)
    {
    $name = $format['name'];
    $instructions_special = $format['instructions'];
    $content .= "  <tr id=\"row-".str_replace(" ", "", $name)."\" onmouseover=\"highlight(this.id);\" onmouseout=\"unhighlight(this.id);\" onclick=\"document.location='?convertfrom=$name_unix'\">\n   <td>&rarr;&nbsp;</td>\n   <td><center>";
    if ($format['image'])
      $content .= "<a href=\"?convertfrom=$name_unix\"><img src=\"".$format['image']."\" alt=\"[".strtoupper($name)." ICON]\" /></a><br />";
    $content .= "<a href=\"?convertfrom=$name_unix\">$name</a></center></td>\n  </tr>\n";
    }
  }
$content .= " </tbody>
</table>
<h1>Convert</h1>
<p>Log2Log is different in that it is an online chat log converter. There are certain actions to take before Log2Log can convert your chat logs. Each service has its own instructions for preparing the chat logs for conversion, but for most services, the steps to convert your logs should be similar to the following:
 <ol>
  <li>Find the folder that contains all the chat logs you want to convert, generated by the IM client. Make sure that you haven't changed up the structure, or the Log2Log format class might not be able to understand what your logs are.</li>
  <li>Compress that directory into an archive, probably into either a .ZIP or a .TAR.GZ file.</li>
  <li>Navigate in the log converter section of Log2Log to the appropriate file upload form.</li>
  <li>Upload the archive of the chat logs that you made to the Log2Log chat log converter. If your browser is experiencing difficulty uploading the archive, Log2Log recommends the <a href=\"http://chrome.google.com/\" target=\"_blank\">Google Chrome</a> web browser. Google Chrome tends to handle large file uploads better than other browsers.</li>
  <li>Be patient! The process can take a long time, but usually, the file upload takes up the most time. You should get a download that contains all the converted chat log files.</li>
 </ol>
</p>
<p>There it is on the right. Click on the service you want to convert <em>from</em>.</p>";

// Step 2: Get what to convert to
if ($_REQUEST['convertfrom'] && !$_REQUEST['convertto'])
  {
  $content = "<table class=\"fromchart\">
 <thead class=\"fromcharthead\">
  <th colspan=\"2\">To Service</th>
 </thead>
 <tbody class=\"fromchartbody\">
";
  foreach ($FORMATS as $name_unix => $format)
    {
    if ($format['from'] == true && strtolower($_REQUEST['convertfrom']) == strtolower($name_unix))
      {
      $name = $format['name'];
      foreach ($FORMATS as $name2_unix => $format2)
        {
        if ($format2['to'] == true)
          {
          $name2 = $format2['name'];
          $content .= "  <tr id=\"row-".str_replace(" ", "", $name2)."\" onmouseover=\"highlight(this.id);\" onmouseout=\"unhighlight(this.id);\" onclick=\"document.location='?convertfrom=$name_unix&convertto=$name2_unix'\">\n   <td>&rarr;&nbsp;</td>\n   <td><center>";
          if ($format2['image'])
            $content .= "<a href=\"?convertfrom=$name_unix&convertto=$name2_unix\"><img src=\"".$format2['image']."\" alt=\"[".strtoupper($name2)." ICON]\" /></a><br />";
          $content .= "<a href=\"?convertfrom=$name_unix&convertto=$name2_unix\">$name2</a></center></td>\n  </tr>\n";
          }
        }
      $content .= " </tbody>\n</table>";
      $content .= "<fieldset><legend>Special Instructions for Converting from $name</legend>\n {$format['instructions']}\n</fieldset>";
      }
    }
  }

// Step 3: Final input: The get-me-the-stuff form
elseif ($_REQUEST['convertfrom'] && $_REQUEST['convertto'])
  {
  foreach ($FORMATS as $name_unix => $format)
    {
    if ($format['from'] == true && strtolower($_REQUEST['convertfrom']) == strtolower($name_unix))
      {
      $name = $format['name'];
      foreach ($FORMATS as $name2_unix => $format2)
        {
        if ($format2['to'] == true && strtolower($_REQUEST['convertto']) == strtolower($name2_unix))
          {
          $name2 = $format2['name'];
          $form_head = '<form action="'.$_SERVER['PHP_SELF'].'" method="post" enctype="multipart/form-data">
 <input type="hidden" name="convertfrom" value="'.$name_unix.'" />
 <input type="hidden" name="convertto" value="'.$name2_unix.'" />
 <input type="hidden" name="converting" value="true" />
';
          $form = ' <span style="float: right;">
  <strong style="text-decoration: underline;">Acceptable Timezone Format Examples</strong><br />
  <span style="font-style: italic;">Recommended:</span> America/Chicago, Asia/Hong_Kong<br />
  <span style="font-style: italic;">Acceptable:</span> CST, HKST<br />
 </span><label for="file">Upload:</label> <input type="file" name="file" id="file" /><br />
<label for="timezone">Timezone:</label> <input type="text" name="timezone" id="timezone" /><br />
<input type="submit" value="Convert" />';
          $form_foot = '
</form>
<hr />
<table width="100%">
 <thead>
  <th>Converting From</th>
  <th>&rarr;</th>
  <th>Standardizing With</th>
  <th>&rarr;</th>
  <th>Converting To</th>
 </thead>
 <tbody style="text-align: center;">
  <tr>
   <td>';
          if ($format['image'])
            $form_foot .= "<img src=\"".$format['image']."\" alt=\"[".strtoupper($name)." ICON]\" /><br />";
          $form_foot .= $name.'</td>
   <td></td>
   <td><img src="'.LOG2LOG_FORMAT_SERVICEICON_SRC.'" alt="[STANDARD FORMAT ICON]" /><br />'.LOG2LOG_FORMAT.'</td>
   <td></td>
   <td>';
          if ($format2['image'])
            $form_foot .= "<img src=\"".$format2['image']."\" alt=\"[".strtoupper($name2)." ICON]\" /><br />";
          $form_foot .= $name2.'</td>
  </tr>
 </tbody>
</table>';
          if ($format['form'])
            $form = $format['form'];
          $content = $form_head.indent($form, 1).$form_foot;
          }
        }
      }
    }
  }

// Step 4 (final): Process the final query. :D
if ($_REQUEST['convertfrom'] && $_REQUEST['convertto'] && $_REQUEST['converting'])
  {
  foreach ($FORMATS as $name => $format)
    {
    if ($format['from'] == true && strtolower($_REQUEST['convertfrom']) == strtolower($name))
      {
      foreach ($FORMATS as $name2 => $format2)
        {
        if ($format2['to'] == true && strtolower($_REQUEST['convertto']) == strtolower($name2))
          {
          eval('$FROM = new '.$name.'();');
          eval('$TO = new '.$name2.'();');
          
          // Import data provided by the final query.
          $from_data = $core->import();
          
          // Have the format classes handle the rest.
          $from_result = $FROM->processFrom($from_data);
          //  Continue if no error
          if ($from_result != false)
            {
            $to_result = $TO->processTo($from_result);
            // Export log data to the client.
            $core->export($to_result);
            }
          else
            {
            log2log_debug_error("convert", "`From` conversion failed!");
            }
          
          // TODO: Error handling
          // DEBUG: Incomplete raw output here:
          #foreach ($to_result as $final_item) { echo $final_item; } die();
          if ($LOG2LOG_error)
            {
            header("Content-type: text/plain");
            die(print_r($LOG2LOG_error));
            }
          else
            {
            die(print_r($to_result));
            }
          }
        }
      }
    }
  }

// Add indentions to make the source HTML look nice.
$content = indent($content, 4);

// Display Configuration
define('LOG2LOG_TITLE', "Convert - Log2Log");
define('LOG2LOG_BODY', $content);

// Display!
$core->display();
?>
